-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Cambiatus.Object.User exposing (..)

import Cambiatus.Enum.TransferDirection
import Cambiatus.InputObject
import Cambiatus.Interface
import Cambiatus.Object
import Cambiatus.Scalar
import Cambiatus.ScalarCodecs
import Cambiatus.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


account : SelectionSet String Cambiatus.Object.User
account =
    Object.selectionForField "String" "account" [] Decode.string


address :
    SelectionSet decodesTo Cambiatus.Object.Address
    -> SelectionSet (Maybe decodesTo) Cambiatus.Object.User
address object_ =
    Object.selectionForCompositeField "address" [] object_ (identity >> Decode.nullable)


analysisCount : SelectionSet Int Cambiatus.Object.User
analysisCount =
    Object.selectionForField "Int" "analysisCount" [] Decode.int


avatar : SelectionSet (Maybe String) Cambiatus.Object.User
avatar =
    Object.selectionForField "(Maybe String)" "avatar" [] (Decode.string |> Decode.nullable)


bio : SelectionSet (Maybe String) Cambiatus.Object.User
bio =
    Object.selectionForField "(Maybe String)" "bio" [] (Decode.string |> Decode.nullable)


chatToken : SelectionSet (Maybe String) Cambiatus.Object.User
chatToken =
    Object.selectionForField "(Maybe String)" "chatToken" [] (Decode.string |> Decode.nullable)


chatUserId : SelectionSet (Maybe String) Cambiatus.Object.User
chatUserId =
    Object.selectionForField "(Maybe String)" "chatUserId" [] (Decode.string |> Decode.nullable)


type alias ClaimsOptionalArguments =
    { communityId : OptionalArgument String }


claims :
    (ClaimsOptionalArguments -> ClaimsOptionalArguments)
    -> SelectionSet decodesTo Cambiatus.Object.Claim
    -> SelectionSet (List decodesTo) Cambiatus.Object.User
claims fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { communityId = Absent }

        optionalArgs =
            [ Argument.optional "communityId" filledInOptionals.communityId Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "claims" optionalArgs object_ (identity >> Decode.list)


communities :
    SelectionSet decodesTo Cambiatus.Object.Community
    -> SelectionSet (List decodesTo) Cambiatus.Object.User
communities object_ =
    Object.selectionForCompositeField "communities" [] object_ (identity >> Decode.list)


contacts :
    SelectionSet decodesTo Cambiatus.Object.Contact
    -> SelectionSet (List decodesTo) Cambiatus.Object.User
contacts object_ =
    Object.selectionForCompositeField "contacts" [] object_ (identity >> Decode.list)


createdAt : SelectionSet (Maybe String) Cambiatus.Object.User
createdAt =
    Object.selectionForField "(Maybe String)" "createdAt" [] (Decode.string |> Decode.nullable)


createdBlock : SelectionSet (Maybe Int) Cambiatus.Object.User
createdBlock =
    Object.selectionForField "(Maybe Int)" "createdBlock" [] (Decode.int |> Decode.nullable)


createdEosAccount : SelectionSet (Maybe String) Cambiatus.Object.User
createdEosAccount =
    Object.selectionForField "(Maybe String)" "createdEosAccount" [] (Decode.string |> Decode.nullable)


email : SelectionSet (Maybe String) Cambiatus.Object.User
email =
    Object.selectionForField "(Maybe String)" "email" [] (Decode.string |> Decode.nullable)


type alias GetPayersByAccountRequiredArguments =
    { account : String }


{-| List of payers to the given recipient fetched by the part of the account name.
-}
getPayersByAccount :
    GetPayersByAccountRequiredArguments
    -> SelectionSet decodesTo Cambiatus.Object.User
    -> SelectionSet (Maybe (List (Maybe decodesTo))) Cambiatus.Object.User
getPayersByAccount requiredArgs object_ =
    Object.selectionForCompositeField "getPayersByAccount" [ Argument.required "account" requiredArgs.account Encode.string ] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


interests : SelectionSet (Maybe String) Cambiatus.Object.User
interests =
    Object.selectionForField "(Maybe String)" "interests" [] (Decode.string |> Decode.nullable)


kyc :
    SelectionSet decodesTo Cambiatus.Object.KycData
    -> SelectionSet (Maybe decodesTo) Cambiatus.Object.User
kyc object_ =
    Object.selectionForCompositeField "kyc" [] object_ (identity >> Decode.nullable)


location : SelectionSet (Maybe String) Cambiatus.Object.User
location =
    Object.selectionForField "(Maybe String)" "location" [] (Decode.string |> Decode.nullable)


name : SelectionSet (Maybe String) Cambiatus.Object.User
name =
    Object.selectionForField "(Maybe String)" "name" [] (Decode.string |> Decode.nullable)


network :
    SelectionSet decodesTo Cambiatus.Object.Network
    -> SelectionSet (Maybe (List (Maybe decodesTo))) Cambiatus.Object.User
network object_ =
    Object.selectionForCompositeField "network" [] object_ (identity >> Decode.nullable >> Decode.list >> Decode.nullable)


products :
    SelectionSet decodesTo Cambiatus.Object.Product
    -> SelectionSet (List (Maybe decodesTo)) Cambiatus.Object.User
products object_ =
    Object.selectionForCompositeField "products" [] object_ (identity >> Decode.nullable >> Decode.list)


type alias TransfersOptionalArguments =
    { after : OptionalArgument String
    , before : OptionalArgument String
    , date : OptionalArgument Cambiatus.ScalarCodecs.Date
    , direction : OptionalArgument Cambiatus.Enum.TransferDirection.TransferDirection
    , first : OptionalArgument Int
    , last : OptionalArgument Int
    , secondPartyAccount : OptionalArgument String
    }


{-|

  - date - The date of the transfer in `yyyy-mm-dd` format.
  - secondPartyAccount - Account name of the other participant of the transfer.

-}
transfers :
    (TransfersOptionalArguments -> TransfersOptionalArguments)
    -> SelectionSet decodesTo Cambiatus.Object.TransferConnection
    -> SelectionSet (Maybe decodesTo) Cambiatus.Object.User
transfers fillInOptionals object_ =
    let
        filledInOptionals =
            fillInOptionals { after = Absent, before = Absent, date = Absent, direction = Absent, first = Absent, last = Absent, secondPartyAccount = Absent }

        optionalArgs =
            [ Argument.optional "after" filledInOptionals.after Encode.string, Argument.optional "before" filledInOptionals.before Encode.string, Argument.optional "date" filledInOptionals.date (Cambiatus.ScalarCodecs.codecs |> Cambiatus.Scalar.unwrapEncoder .codecDate), Argument.optional "direction" filledInOptionals.direction (Encode.enum Cambiatus.Enum.TransferDirection.toString), Argument.optional "first" filledInOptionals.first Encode.int, Argument.optional "last" filledInOptionals.last Encode.int, Argument.optional "secondPartyAccount" filledInOptionals.secondPartyAccount Encode.string ]
                |> List.filterMap identity
    in
    Object.selectionForCompositeField "transfers" optionalArgs object_ (identity >> Decode.nullable)
